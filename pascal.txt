program                                 ::= program_heading space? block "."
program_heading                         ::= "program" space identifier "(" identifier_list ")" ";"
block                                   ::= space? declaration_part? statement_part space?
declaration_part                        ::= label_declaration_part? constant_definition_part? type_definition_part? variable_declaration_part? procedure_and_function_declaration_part
label_declaration_part                  ::= "label" label ("," label)* ";"
constant_definition_part                ::= "const" constant_definition ";" (constant_definition ";")*
constant_definition                     ::= identifier "=" constant
type_definition_part                    ::= "type" type_definition ";" (type_definition ";")*
type_definition                         ::= identifier "=" type
variable_declaration_part               ::= "var" variable_declaration ";" (variable_declaration ";")*
variable_declaration                    ::= identifier_list ":" type
procedure_and_function_declaration_part ::= ((procedure_declaration | function_declaration) ";")*
procedure_declaration                   ::= procedure_heading ";" procedure_body | procedure_heading ";" directive | procedure_identification ";" procedure_body
procedure_body                          ::= block
function_declaration                    ::= function_heading ";" function_body | function_heading ";" directive | function_identification ";" function_body
function_body                           ::= block
directive                               ::= "forward" | compiler_defined_directives
compiler_defined_directives             ::= "forward"
statement_part                          ::= "begin" statement_sequence "end"
procedure_heading                       ::= "procedure" identifier formal_parameter_list?
function_heading                        ::= "function" identifier formal_parameter_list? ":" identifier
procedure_identification                ::= "procedure" identifier
function_identification                 ::= "function" identifier
formal_parameter_list                   ::= "(" formal_parameter_section (";" formal_parameter_section)* ")"
formal_parameter_section                ::= value_parameter_section | variable_parameter_section | procedure_parameter_section | function_parameter_section
value_parameter_section                 ::= identifier_list ":" parameter_type
variable_parameter_section              ::= "var" identifier_list ":" parameter_type
procedure_parameter_section             ::= procedure_heading
function_parameter_section              ::= function_heading
parameter_type                          ::= identifier | conformant_array_schema
conformant_array_schema                 ::= packed_conformant_array_schema | unpacked_conformant_array_schema
packed_conformant_array_schema          ::= "packed array" "[" bound_specification "]" "of" identifier
unpacked_conformant_array_schema        ::= "array" "[" bound_specification (";" bound_specification)* "]" "of" (identifier | conformant_array_schema)
bound_specification                     ::= identifier ".." identifier ":" identifier
statement_sequence                      ::= statement (";" statement)*
statement                               ::= space? (label ":")? (simple_statement | structured_statement) space?
simple_statement                        ::= (assignment_statement | procedure_statement | goto_statement)?
assignment_statement                    ::= (variable | identifier) ":=" expression
procedure_statement                     ::= identifier actual_parameter_list?
goto_statement                          ::= "goto" label
structured_statement                    ::= compound_statement | repetitive_statement | conditional_statement | with_statement
compound_statement                      ::= "begin" statement_sequence "end"
repetitive_statement                    ::= while_statement | repeat_statement | for_statement
while_statement                         ::= "while" expression "do" statement
repeat_statement                        ::= "repeat" statement_sequence "until" expression
for_statement                           ::= "for" identifier ":=" expression ("to" | "downto") expression "do" statement
conditional_statement                   ::= if_statement | case_statement
if_statement                            ::= "if" expression "then" statement ("else" statement)?
case_statement                          ::= "case" expression "of" case_limb (";" case_limb)* ";"? "end"
case_limb                               ::= constant ("," constant)* ":" statement
with_statement                          ::= "with" variable ("," variable)* "do" statement
actual_parameter_list                   ::= "(" actual_parameter ("," actual_parameter)* ")"
actual_parameter                        ::= expression | variable | identifier
expression                              ::= simple_expression (relational_operator simple_expression)?
simple_expression                       ::= sign? term (addition_operator term)*
term                                    ::= factor (multiplication_operator factor)*
factor                                  ::= variable | number | string | set | "nil" | identifier | identifier | function_designator | "(" expression ")" | "not" factor
relational_operator                     ::= "=" | "<>" | "<" | "<=" | ">" | ">=" | "in"
addition_operator                       ::= "+" | "-" | "or"
multiplication_operator                 ::= "*" | "/" | "div" | "mod" | "and"
variable                                ::= identifier | component_variable | referenced_variable
component_variable                      ::= indexed_variable | field_designator | file_buffer
referenced_variable                     ::= variable "^"
indexed_variable                        ::= variable "[" expression_list "]"
field_designator                        ::= variable "." identifier
set                                     ::= "[" element_list "]"
element_list                            ::= (expression ("," expression)*)?
function_designator                     ::= identifier actual_parameter_list?
file_buffer                             ::= variable "^"
type                                    ::= simple_type | structured_type | pointer_type | identifier
simple_type                             ::= subrange_type | enumerated_type
enumerated_type                         ::= "(" identifier_list ")"
subrange_type                           ::= constant ".." constant
structured_type                         ::= "packed"? unpacked_structured_type
unpacked_structured_type                ::= array_type | record_type | set_type | type
array_type                              ::= "array" "[" simple_type ("," simple_type)* "]" "of" type
record_type                             ::= "record" field_list "end"
set_type                                ::= "set of" type
file_type                               ::= "file of" type
pointer_type                            ::= "^" identifier
field_list                              ::= ((fixed_part (";" variant_part)? | variant_part) ";"?)?
fixed_part                              ::= record_section (";" record_section)*
record_section                          ::= identifier_list ":" type
variant_part                            ::= "case" tag_field identifier "of" variant (";" variant)*
tag_field                               ::= (identifier ":")?
variant                                 ::= constant ("," constant)* ":" "(" field_list ")"
output_list                             ::= output_value ("," output_value)*
output_value                            ::= expression (";" field_width (":" fraction_length)?)?
field_width                             ::= expression
fraction_length                         ::= expression
identifier                              ::= [A-Za-z] ([A-Za-z] | [0-9])*
variable_list                           ::= variable ("," variable)*
identifier_list                         ::= identifier ("," identifier)*
expression_list                         ::= expression ("," expression)*
number                                  ::= integer_number | real_number
integer_number                          ::= digit_sequence
real_number                             ::= digit_sequence "." digit_sequence? scale_factor? | digit_sequence scale_factor
scale_factor                            ::= ("E" | "e") [ sign ] digit_sequence
unsigned_digit_sequence                 ::= [0-9]+
digit_sequence                          ::= sign? unsigned_digit_sequence
sign                                    ::= "+" | "-"
string                                  ::= "'" (([#x0-#x10FFFF] - "'") | "''")+ "'"
label                                   ::= integer_number
constant                                ::= sign? (identifier | number) | string
space                                   ::= [#x9#xA#xD#x20]+