variable:
    pp_file ::= group?
    group ::= group_part | group group_part
    group_part ::= if_sec | ctrl_line | text_line | '#' non_dir
    if_sec ::= if_grp elif_grps? else_grp? endif_line
    if_grp ::= '#' 'if' cond_expr [#xA] group? | '#' 'ifdef' id [#xA] group? | '#' 'ifndef' id [#xA] group?
    elif_grps ::= elif_grp | elif_grps elif_grp
    elif_grp ::= '#' 'elif' cond_expr [#xA] group?
    else_grp ::= '#' 'else' [#xA] group?
    endif_line ::= '#' 'endif' [#xA]
    ctrl_line ::= '#' 'include' pp_tokens [#xA] | '#' 'define' id rpl_list [#xA] | '#' 'define' id lpr '...' ')' rpl_list [#xA] | '#' 'define' id lpr id_list ',' '...' ')' rpl_list [#xA] | '#' 'undef' id [#xA] | '#' 'line' pp_tokens? [#xA] | '#' 'error' pp_tokens? [#xA] | '#' 'pragma' pp_tokens? [#xA] | '#' [#xA]
    id_list ::= id | id_list ',' id
    text_line ::= pp_tokens? [#xA]
    non_dir ::= pp_tokens [#xA]
    rpl_list ::= pp_tokens?
    pp_tokens ::= pp_token | pp_tokens pp_token
    pri_expr ::= id | const | str_ltrl | '(' expr ')' | gen_sel
    gen_sel ::= '_Generic' '(' asgn_expr ',' gen_asc_list ')'
    gen_asc_list ::= gen_asc | gen_asc_list ',' gen_asc
    gen_asc ::= type_name ':' asgn_expr | 'default' ':' asgn_expr
    post_expr ::= pri_expr | post_expr '[' expr ']' | post_expr '(' arg_expr_list? ')' | post_expr '.' id | post_expr '->' id | post_expr '++' | post_expr '--' | '(' type_name ')' '{' init_list ','? '}'
    arg_expr_list ::= asgn_expr | arg_expr_list ',' asgn_expr
    unary_expr ::= post_expr | '++' unary_expr | '--' unary_expr | '&' cast_expr | '*' cast_expr | '+' cast_expr | '-' cast_expr | '~' cast_expr | '!' cast_expr | 'sizeof' unary_expr | 'sizeof' '(' type_name ')' | '_Alignof' '(' type_name ')'
    cast_expr ::= unary_expr | '(' type_name ')' cast_expr
    mul_expr ::= cast_expr | mul_expr '*' cast_expr | mul_expr '/' cast_expr | mul_expr '%' cast_expr
    add_expr ::= mul_expr | add_expr '+' mul_expr | add_expr '-' mul_expr
    shift_expr ::= add_expr | shift_expr '<<' add_expr | shift_expr '>>' add_expr
    rel_expr ::= shift_expr | rel_expr '<' shift_expr | rel_expr '>' shift_expr | rel_expr '<=' shift_expr | rel_expr '>=' shift_expr
    eq_expr ::= rel_expr | eq_expr '==' rel_expr | eq_expr '!=' rel_expr
    and_expr ::= eq_expr | and_expr '&' eq_expr
    xor_expr ::= and_expr | xor_expr '^' and_expr
    or_expr ::= xor_expr | or_expr '|' xor_expr
    land_expr ::= or_expr | land_expr '&&' or_expr
    lor_expr ::= land_expr | lor_expr '||' land_expr
    cond_expr ::= lor_expr | lor_expr '?' expr ':' cond_expr
    asgn_expr ::= cond_expr | unary_expr '=' asgn_expr | unary_expr '*=' asgn_expr | unary_expr '/=' asgn_expr | unary_expr '%=' asgn_expr | unary_expr '+=' asgn_expr | unary_expr '-=' asgn_expr | unary_expr '<<=' asgn_expr | unary_expr '>>=' asgn_expr | unary_expr '&=' asgn_expr | unary_expr '^=' asgn_expr | unary_expr '|=' asgn_expr
    expr ::= asgn_expr | expr ',' asgn_expr
    decl ::= decl_spec init_decltor_list? ';' | st_asrt_decl
    decl_spec ::= st_cl_spec decl_spec? | type_spec decl_spec? | type_qual decl_spec? | func_spec decl_spec? | align_spec decl_spec?
    init_decltor_list ::= init_decltor | init_decltor_list ',' init_decltor
    init_decltor ::= decltor | decltor '=' initlzer
    st_cl_spec ::= 'typedef' | 'extern' | 'static' | '_Thread_local' | 'auto' | 'register'
    type_spec ::= 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '_Bool' | '_Complex' | at_type_spec | str_uni_spec | enum_spec | typedef_name
    str_uni_spec ::= str_or_uni id? '{' str_decl_list '}' | str_or_uni id
    str_or_uni ::= 'struct' | 'union'
    str_decl_list ::= str_decl | str_decl_list str_decl
    str_decl ::= spec_qual_list str_decltor_list? ';' | st_asrt_decl
    spec_qual_list ::= type_spec spec_qual_list? | type_qual spec_qual_list? | align_spec spec_qual_list?
    str_decltor_list ::= str_decltor | str_decltor_list ',' str_decltor
    str_decltor ::= decltor | decltor? ':' cond_expr
    enum_spec ::= 'enum' id? '{' enumtor_list ','? '}' | 'enum' id
    enumtor_list ::= enumtor | enumtor_list ',' enumtor
    enumtor ::= id | id '=' cond_expr
    at_type_spec ::= '_Atomic' '(' type_name ')'
    type_qual ::= 'const' | 'restrict' | 'volatile' | '_Atomic'
    func_spec ::= 'inline' | '_Noreturn'
    align_spec ::= '_Alignas' '(' type_name ')' | '_Alignas' '(' cond_expr ')'
    decltor ::= pointer? dir_decl
    dir_decl ::= id | '(' decltor ')' | dir_decl '[' type_qual_list? asgn_expr? ']' | dir_decl '[' type_qual_list? '*' ']' | dir_decl '(' par_type_list? ')'
    pointer ::= '*' type_qual_list?  | '*' type_qual_list? pointer
    type_qual_list ::= type_qual | 'static' | type_qual_list type_qual | type_qual_list 'static'
    par_type_list ::= par_list | par_list ',' '...'
    par_list ::= par_decl | par_list ',' par_decl
    par_decl ::= decl_spec decltor | decl_spec abs_decltor?
    type_name ::= spec_qual_list abs_decltor?
    abs_decltor ::= pointer | pointer? dir_abs_decl
    dir_abs_decl ::= '(' abs_decltor ')' | dir_abs_decl? '[' type_qual_list? asgn_expr? ']' | dir_abs_decl? '[' '*' ']' | dir_abs_decl? '(' par_type_list? ')'
    initlzer ::= asgn_expr | '{' init_list '}' | '{' init_list ',' '}'
    init_list ::= dsgn? initlzer | init_list ',' dsgn? initlzer
    dsgn ::= dsgntor_list '='
    dsgntor_list ::= dsgntor | dsgntor_list dsgntor
    dsgntor ::= '[' cond_expr ']' | '.' id
    st_asrt_decl ::= '_Static_assert' '(' cond_expr ',' str_ltrl ')' ';' | '_Static_assert' '(' cond_expr ')' ';'
    pp_token ::= header_name | id | pp_number | char_const | str_ltrl | punct | [^#x20]
terminal:
    char_set ::= [#x0-#x10FFFF]
    header_name ::= '<' (char_set - [>#xA])+ '>' | '"' (char_set - ["#xA])+ '"'
    id ::= ([_A-Za-z] | uni_char_name) ([_0-9A-Za-z] | uni_char_name)*
    pp_number ::= ('.'? [0-9]) ([_0-9A-Za-z] | uni_char_name | [EePp] [+#x2D] | '.')*
    punct ::= [#x5B#x5D(){}.&*+#x2D~!/%<>#x5E|?:;=,#x23] | '->' | '++' | '--' | '<<' | '>>' | '<=' | '>=' | '==' | '!=' | '&&' | '||' | '...' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' | '##' | '<:' | ':>' | '<%' | '%>' | '%:' | '%:%:'
    lpr ::= '(' ' '*
    typedef_name ::= id
    uni_char_name ::= '\u' hex_quad | '\U' hex_quad hex_quad
    hex_quad ::= [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
    const ::= int_const | float_const | char_const
    int_const ::= (dec_const | oct_const | hex_const) int_suf?
    dec_const ::= [1-9] [0-9]*
    oct_const ::= '0' [0-7]*
    hex_const ::= ('0x' | '0X') [0-9A-Fa-f]+
    int_suf ::= [Uu] [Ll]? | [Uu] ('LL' | 'll') | [Ll] [Uu]? | ('LL' | 'll') [Uu]?
    float_const ::= dec_fconst | hex_fconst
    dec_fconst ::= (frac_const exp_part? | [0-9]+ exp_part) [FLfl]?
    hex_fconst ::= ('0x' | '0X') (hfrac_const | [0-9A-Fa-f]+) bin_exp_part [FLfl]?
    frac_const ::= [0-9]* '.' [0-9]+ | [0-9]+ '.'
    exp_part ::=  [Ee] [+#x2D]? [0-9]+
    hfrac_const ::= [0-9A-Fa-f]* '.' [0-9A-Fa-f]+ | [0-9A-Fa-f]+ '.'
    bin_exp_part ::= [Pp] [+#x2D]? [0-9]+
    char_const ::= [LUu]? "'" ((char_set - ['\#xA]) | esc_seq)+ "'"
    esc_seq ::= sim_esc_seq | oct_esc_seq | hex_esc_seq | uni_char_name
    sim_esc_seq ::= "\'" | '\"' | '\?' | '\\' | '\a' |'\b' | '\f' | '\n' | '\r' | '\t' | '\v'
    oct_esc_seq ::= '\' [0-7] [0-7]? [0-7]?
    hex_esc_seq ::= '\x' [0-9A-Fa-f]+
    str_ltrl ::= ([UuL] | 'u8')? '"' ((char_set - ["\#xA]) | esc_seq)+ '"'
ignore:
    space ::= [#x9#xD#x20]
    comment ::= '/*' (char_set* - char_set* '*/' char_set*) '*/' | '//' (char_set - [#xD])*