variable:
    expr ::= asgn_expr | expr ',' asgn_expr
    pri_expr ::= id | const | str_ltrl | '(' expr ')' | gen_sel
    gen_sel ::= '_Generic' '(' asgn_expr ',' gen_asc_list ')'
    gen_asc_list ::= gen_asc | gen_asc_list ',' gen_asc
    gen_asc ::= (type_name | 'default') ':' asgn_expr
    post_expr ::= pri_expr | post_expr '[' expr ']' | post_expr '(' arg_expr_list? ')' | post_expr '.' id | post_expr '->' id | post_expr '++' | post_expr '--' | '(' type_name ')' '{' init_list ','? '}'
    arg_expr_list ::= asgn_expr | arg_expr_list ',' asgn_expr
    unary_expr ::= post_expr | '++' unary_expr | '--' unary_expr | '&' unary_expr | '*' unary_expr | '+' unary_expr | '-' unary_expr | '~' unary_expr | '!' unary_expr
    cast_expr ::= unary_expr | '(' type_name ')' cast_expr
    mul_expr ::= cast_expr | mul_expr '*' cast_expr | mul_expr '/' cast_expr | mul_expr '%' cast_expr
    add_expr ::= mul_expr | add_expr '+' mul_expr | add_expr '-' mul_expr
    shift_expr ::= add_expr | shift_expr '<<' add_expr | shift_expr '>>' add_expr
    rel_expr ::= shift_expr | rel_expr '<' shift_expr | rel_expr '>' shift_expr | rel_expr '<=' shift_expr | rel_expr '>=' shift_expr
    eq_expr ::= rel_expr | eq_expr '==' rel_expr | eq_expr '!=' rel_expr
    and_expr ::= eq_expr | and_expr '&' eq_expr
    xor_expr ::= and_expr | xor_expr '^' and_expr
    or_expr ::= xor_expr | or_expr '|' xor_expr
    land_expr ::= or_expr | land_expr '&&' or_expr
    lor_expr ::= land_expr | lor_expr '||' land_expr
    cond_expr ::= lor_expr | lor_expr '?' expr ':' cond_expr
    asgn_expr ::= cond_expr | unary_expr '=' asgn_expr | unary_expr '*=' asgn_expr | unary_expr '/=' asgn_expr | unary_expr '%=' asgn_expr | unary_expr '+=' asgn_expr | unary_expr '-=' asgn_expr | unary_expr '<<=' asgn_expr | unary_expr '>>=' asgn_expr | unary_expr '&=' asgn_expr | unary_expr '^=' asgn_expr | unary_expr '|=' asgn_expr
    type_name ::= 'type_name'
    init_list ::= 'init_list'
terminal:
    char_set ::= [#x0-#x10FFFF]
    token ::= id | const | str_ltrl | punct
    pp_token ::= header_name | id | pp_number | char_const | str_ltrl | punct | char_set - space
    id ::= ([_A-Za-z] | uni_char_name) ([_0-9A-Za-z] | uni_char_name)*
    uni_char_name ::= '\u' hex_quad | '\U' hex_quad hex_quad
    hex_quad ::= [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
    const ::= int_const | float_const | char_const
    int_const ::= (dec_const | oct_const | hex_const) int_suf?
    dec_const ::= [1-9] [0-9]*
    oct_const ::= '0' [0-7]*
    hex_const ::= ('0x' | '0X') [0-9A-Fa-f]+
    int_suf ::= [Uu] [Ll]? | [Uu] ('LL' | 'll') | [Ll] [Uu]? | ('LL' | 'll') [Uu]?
    float_const ::= dec_fconst | hex_fconst
    dec_fconst ::= (frac_const exp_part? | [0-9]+ exp_part) [FLfl]?
    hex_fconst ::= ('0x' | '0X') (hfrac_const | [0-9A-Fa-f]+) bin_exp_part [FLfl]?
    frac_const ::= [0-9]+? '.' [0-9]+ | [0-9]+ '.'
    exp_part ::=  [Ee] [+#x2D]? [0-9]+
    hfrac_const ::= [0-9A-Fa-f]* '.' [0-9A-Fa-f]+ | [0-9A-Fa-f]+ '.'
    bin_exp_part ::= [Pp] [+#x2D]?[0-9]+
    char_const ::= [LlUu] "'" ((char_set - ['\#xA]) | esc_seq)+ "'"
    esc_seq ::= sim_esc_seq | oct_esc_seq | hex_esc_seq | uni_char_name
    sim_esc_seq ::= "\'" | '\"' | '\?' | '\\' | '\a' |'\b' | '\f' | '\n' | '\r' | '\t' | '\v'
    oct_esc_seq ::= '\' [0-7] [0-7]? [0-7]?
    hex_esc_seq ::= '\x' [0-9A-Fa-f]+
    str_ltrl ::= ([UuL] | 'u8')? '"' ((char_set - ["\#xA]) | esc_seq)+ '"'
    punct ::= [#x5B#x5D(){}.&*+#x2D~!/%<>#x5E|?:;=,#] | '->' | '++' | '--' | '<<' | '>>' | '<=' | '>=' | '==' | '!=' | '&&' | '||' | '...' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' | '##' | '<:' | ':>' | '<%' | '%>' | '%:' | '%:%:'
    header_name ::= '<' (char_set - [>#xA])+ '>' | '"' (char_set - ["#xA])+ '"'
    pp_number ::= ('.'? [0-9]) ([_0-9A-Za-z] | uni_char_name | [EePp] [+#x2D] | '.')*
ignore:
    space ::= [#x9#xA#xD#x20]
    comment ::= '/*' (char_set* - char_set* '*/' char_set*) '*/' | '//' char_set* [#xA#xD]+
